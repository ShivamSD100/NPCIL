@model NPCIL.Models.PublicationCategoriesModel;
@{
    ViewData["Title"] = "Add Publication Categories";
}

<div class="page-header">
    <div class="page-block">
        <div class="row align-items-center">
            <div class="col-md-6">
                <ul class="breadcrumb">
                    <li class="breadcrumb-item"><a href="../dashboard/index.html">Dashboard</a></li>
                    <li class="breadcrumb-item"><a href="javascript: void(0)">Publication Management</a></li>
                    <li class="breadcrumb-item" aria-current="page">Add Publication Categories</li>
                </ul>
                <div class="page-header-title">
                    <h2 class="mb-0">Add Publication Categories</h2>
                </div>
            </div>
            <div class="col-md-6 text-end">
                <a href="~/PublicationCategories/PublicationCategoriesList" class="btn btn-primary">View Add Publication Categories</a> 
            </div>
        </div>
    </div>
</div>


<div class="row">
    <!-- [ Form Validation ] start -->
    
    <div class="col-sm-12">
        <div class="card">
            <div class="card-header">
                <h5>Add Publication Categories</h5>
            </div>
            <div class="card-body">
                <form asp-controller="PublicationCategories" asp-action="AddPublicationCategories" method="post" enctype="multipart/form-data" class="validate-me" id="validate-me" data-validate="" novalidate="true">
                    @Html.HiddenFor(m => m.CategoriesId)
                    <div class="mb-3 row">
                        <label class="col-lg-4 col-form-label text-lg-end">Title</label>
                        <div class="col-lg-6">
                            @Html.TextBoxFor(m => m.CategoriesTitle, new { @class = "form-control", placeholder = "" })
                            @Html.ValidationMessageFor(m => m.CategoriesTitle, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="mb-3 row">
                        <label class="col-lg-4 col-form-label text-lg-end">Title(in reg lang)</label>
                        <div class="col-lg-6">
                            @Html.TextBoxFor(m => m.CategoriesTitleRegLang, new { @class = "form-control", placeholder = "" })
                            @Html.ValidationMessageFor(m => m.CategoriesTitleRegLang, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="mb-3 row">
                        <label class="col-lg-4 col-form-label text-lg-end">Upload Image</label>
                        <div class="col-lg-6">
                            <input asp-for="CategoriesImg" type="file" class="form-control">
                            <div class="preview-container" style="margin-top:10px;">
                                <img id="CategoriesImg_imgPreview" src="#" alt="Banner Preview" style="max-width: 20%; display: none;">
                                <video id="CategoriesImg_videoPreview" controls style="max-width: 20%; display: none;"></video>
                                <div id="CategoriesImg_fileNamePreview" style="display: none;"></div>
                            </div>
                            @* <p style="color: red; font:small;">Tip: .jpeg .png .gif image only</p> *@
                           @*  @Html.ValidationMessageFor(m => m.CategoriesImg, "", new { @class = "text-danger" }) *@
                        </div>
                    </div>

                    <div class="mb-3 row">
                        <label class="col-lg-4 col-form-label text-lg-end">Link URL</label>
                        <div class="col-lg-6">
                            @Html.TextBoxFor(m => m.CategoriesLinkURL, new { @class = "form-control", placeholder = "" })
                            <p style="color: red; font:small;">Tip: http://www.google.com</p>
                            @Html.ValidationMessageFor(m => m.CategoriesLinkURL, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="mb-3 row">
                        <label class="col-lg-4 col-form-label text-lg-end">Alt Tag</label>
                        <div class="col-lg-6">
                            @Html.TextAreaFor(m => m.CategoriesAltTag, new { @class = "form-control", cols = "55", rows = "10" })
                            @Html.ValidationMessageFor(m => m.CategoriesAltTag, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="mb-3 row">
                        <label class="col-lg-4 col-form-label text-lg-end">Alt Tag(in reg lang)</label>
                        <div class="col-lg-6">
                            @Html.TextAreaFor(m => m.CategoriesTagRegLang, new { @class = "form-control", cols = "55", rows = "10" })
                            @Html.ValidationMessageFor(m => m.CategoriesTagRegLang, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="row mb-0">
                        <div class="col-lg-4 col-form-label"></div>
                        <div class="col-lg-6">
                            <input type="submit" class="btn btn-primary" value="Submit" fdprocessedid="6yalqo">
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
    <!-- [ Form Validation ] end -->
</div>

<script>
    <partial name="_ValidationScriptsPartial" />
</script>

<script>
        document.addEventListener("DOMContentLoaded", function () {
            setupFileInputPreview('CategoriesImg');
            
        });
    function setupFileInputPreview(inputId) {
        var input = document.getElementById(inputId);
        var imgPreview = document.getElementById(inputId + '_imgPreview');
        var videoPreview = document.getElementById(inputId + '_videoPreview');
        var fileNamePreview = document.getElementById(inputId + '_fileNamePreview');

        input.addEventListener('change', function (event) {
            var file = event.target.files[0];
            var reader = new FileReader();

            // Hide all previews initially
            imgPreview.style.display = 'none';
            videoPreview.style.display = 'none';
            fileNamePreview.style.display = 'none';

            if (file) {
                if (file.type.startsWith('image/')) {
                    reader.onload = function (e) {
                        imgPreview.setAttribute('src', e.target.result);
                        imgPreview.style.display = 'block';
                    };
                    reader.readAsDataURL(file);
                } else if (file.type.startsWith('video/')) {
                    reader.onload = function (e) {
                        videoPreview.setAttribute('src', e.target.result);
                        videoPreview.style.display = 'block';
                    };
                    reader.readAsDataURL(file);
                } else {
                    fileNamePreview.textContent = 'Selected file: ' + file.name;
                    fileNamePreview.style.display = 'block';
                }
            }
        });
    }

    // Initialize the file input previews

</script>